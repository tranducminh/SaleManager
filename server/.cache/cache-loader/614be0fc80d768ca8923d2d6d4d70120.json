{"remainingRequest":"/Users/ducminh/Desktop/sale-manager-server/node_modules/ts-loader/index.js??ref--10-1!/Users/ducminh/Desktop/sale-manager-server/src/server.ts","dependencies":[{"path":"/Users/ducminh/Desktop/sale-manager-server/src/server.ts","mtime":1582861973316},{"path":"/Users/ducminh/Desktop/sale-manager-server/node_modules/cache-loader/dist/cjs.js","mtime":1582568609056},{"path":"/Users/ducminh/Desktop/sale-manager-server/node_modules/ts-loader/index.js","mtime":1582568610681}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nimport { ApolloServer } from 'apollo-server-express';\nimport * as GraphiQL from 'apollo-server-module-graphiql';\nimport * as cors from 'cors';\nimport * as express from 'express';\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\nimport { execute, subscribe } from 'graphql';\nimport { createServer } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport * as url from 'url';\nimport schema from './graphql/graphqlSchemas';\nfunction graphiqlExpress(options) {\n    var graphiqlHandler = function (req, res, next) {\n        var query = req.url && url.parse(req.url, true).query;\n        GraphiQL.resolveGraphiQLString(query, options, req).then(function (graphiqlString) {\n            res.setHeader('Content-Type', 'text/html');\n            res.write(graphiqlString);\n            res.end();\n        }, function (error) { return next(error); });\n    };\n    return graphiqlHandler;\n}\nexport default (function (port) { return __awaiter(_this, void 0, Promise, function () {\n    var _a, DB_USERNAME, DB_PASSWORD, DB_NAME, MONGODB_URI, app, server, apolloServer;\n    return __generator(this, function (_b) {\n        dotenv.config();\n        _a = process.env, DB_USERNAME = _a.DB_USERNAME, DB_PASSWORD = _a.DB_PASSWORD, DB_NAME = _a.DB_NAME;\n        MONGODB_URI = \"mongodb+srv://\" + DB_USERNAME + \":\" + DB_PASSWORD + \"@cluster0-oajkt.mongodb.net/\" + DB_NAME + \"?retryWrites=true&w=majority\";\n        mongoose\n            .connect(MONGODB_URI, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useCreateIndex: true,\n        })\n            .then(function () { return console.log('Database connected ...'); })\n            .catch(function (error) { return console.log('Could not connect to database ...', error.message); });\n        app = express();\n        server = createServer(app);\n        app.use('*', cors());\n        apolloServer = new ApolloServer({\n            playground: false,\n            schema: schema,\n        });\n        apolloServer.applyMiddleware({ app: app, path: '/graphql' });\n        if (module.hot) {\n            app.use('/graphiql', graphiqlExpress({\n                endpointURL: '/graphql',\n                query: '# Welcome to your own GraphQL server!\\n#\\n'\n                    + '# Press Play button above to execute GraphQL query\\n#\\n'\n                    + '# You can start editing source code and see results immediately\\n\\n'\n                    + 'query hello($subject:String) {\\n  hello(subject: $subject)\\n}',\n                subscriptionsEndpoint: \"ws://localhost:\" + port + \"/subscriptions\",\n                variables: { subject: 'World' },\n            }));\n        }\n        return [2, new Promise(function (resolve) {\n                server.listen(port, function () {\n                    new SubscriptionServer({\n                        execute: execute,\n                        schema: schema,\n                        subscribe: subscribe,\n                    }, {\n                        path: '/subscriptions',\n                        server: server,\n                    });\n                    resolve(server);\n                });\n            })];\n    });\n}); });\n",{"version":3,"file":"/Users/ducminh/Desktop/sale-manager-server/src/server.ts","sourceRoot":"","sources":["/Users/ducminh/Desktop/sale-manager-server/src/server.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-new */\nimport {ApolloServer} from 'apollo-server-express'\nimport * as GraphiQL from 'apollo-server-module-graphiql'\nimport * as cors from 'cors'\nimport * as express from 'express'\nimport mongoose from 'mongoose'\nimport dotenv from 'dotenv'\n\nimport {execute, subscribe} from 'graphql'\nimport {createServer, Server} from 'http'\nimport {SubscriptionServer} from 'subscriptions-transport-ws'\nimport * as url from 'url'\nimport schema from './graphql/graphqlSchemas'\n\ntype ExpressGraphQLOptionsFunction = (req?: express.Request, res?: express.Response) => any | Promise<any>\n\nfunction graphiqlExpress(options: GraphiQL.GraphiQLData | ExpressGraphQLOptionsFunction) {\n    const graphiqlHandler = (req: express.Request, res: express.Response, next: any) => {\n        const query = req.url && url.parse(req.url, true).query\n        GraphiQL.resolveGraphiQLString(query, options, req).then(\n            (graphiqlString: any) => {\n                res.setHeader('Content-Type', 'text/html')\n                res.write(graphiqlString)\n                res.end()\n            },\n            (error: any) => next(error)\n        )\n    }\n\n    return graphiqlHandler\n}\n\nexport default async (port: number): Promise<Server> => {\n    dotenv.config()\n    const {DB_USERNAME, DB_PASSWORD, DB_NAME} = process.env\n\n    const MONGODB_URI = `mongodb+srv://${DB_USERNAME}:${DB_PASSWORD}@cluster0-oajkt.mongodb.net/${DB_NAME}?retryWrites=true&w=majority`\n    mongoose\n        .connect(MONGODB_URI, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useCreateIndex: true,\n        })\n        .then(() => console.log('Database connected ...'))\n        .catch((error) => console.log('Could not connect to database ...', error.message))\n\n    const app = express()\n\n    const server: Server = createServer(app)\n\n    app.use('*', cors())\n\n    const apolloServer = new ApolloServer({\n        playground: false,\n        schema,\n    })\n\n    apolloServer.applyMiddleware({app, path: '/graphql'})\n\n    if (module.hot) {\n        app.use(\n            '/graphiql',\n            graphiqlExpress({\n                endpointURL: '/graphql',\n                query:\n                    // eslint-disable-next-line prettier/prettier\n                    '# Welcome to your own GraphQL server!\\n#\\n'\n                    // eslint-disable-next-line prettier/prettier\n                    + '# Press Play button above to execute GraphQL query\\n#\\n'\n                    + '# You can start editing source code and see results immediately\\n\\n'\n                    // eslint-disable-next-line prettier/prettier\n                    + 'query hello($subject:String) {\\n  hello(subject: $subject)\\n}',\n                subscriptionsEndpoint: `ws://localhost:${port}/subscriptions`,\n                variables: {subject: 'World'},\n            })\n        )\n    }\n\n    return new Promise<Server>((resolve) => {\n        server.listen(port, () => {\n            // tslint:disable-next-line\n            new SubscriptionServer(\n                {\n                    execute,\n                    schema,\n                    subscribe,\n                },\n                {\n                    path: '/subscriptions',\n                    server,\n                }\n            )\n            resolve(server)\n        })\n    })\n}\n"]}]}