{"remainingRequest":"/Users/ducminh/sale-manager-server/node_modules/ts-loader/index.js??ref--10-1!/Users/ducminh/sale-manager-server/src/graphql/resolvers/user.ts","dependencies":[{"path":"/Users/ducminh/sale-manager-server/src/graphql/resolvers/user.ts","mtime":1582828187056},{"path":"/Users/ducminh/sale-manager-server/node_modules/cache-loader/dist/cjs.js","mtime":1582568609056},{"path":"/Users/ducminh/sale-manager-server/node_modules/ts-loader/index.js","mtime":1582568610681}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nimport { UserInputError, ApolloError } from 'apollo-server-express';\nimport UserModel from '../../models/user';\nexport default {\n    Query: {\n        login: function (obj, _a) {\n            var email = _a.email, password = _a.password;\n            return __awaiter(_this, void 0, void 0, function () {\n                var user, token, error_1;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 2, , 3]);\n                            if (!email) {\n                                return [2, new UserInputError('Email or Username cannot be blank!')];\n                            }\n                            if (!password) {\n                                return [2, new UserInputError('Password cannot be blank!')];\n                            }\n                            return [4, UserModel.findOne({ email: email })];\n                        case 1:\n                            user = _b.sent();\n                            if (!user || !user.isValidPassword(password)) {\n                                return [2, new ApolloError('Wrong user or password!')];\n                            }\n                            token = user.generateAuthToken();\n                            return [2, token];\n                        case 2:\n                            error_1 = _b.sent();\n                            return [2, new ApolloError(error_1)];\n                        case 3: return [2];\n                    }\n                });\n            });\n        },\n        signup: function (obj, _a) {\n            var email = _a.email, password = _a.password, username = _a.username, address = _a.address;\n            return __awaiter(_this, void 0, void 0, function () {\n                var user, token, error_2;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 2, , 3]);\n                            if (!email) {\n                                return [2, new UserInputError('Email cannot be blank!')];\n                            }\n                            if (!username) {\n                                return [2, new UserInputError('Usernam cannot be blank!')];\n                            }\n                            if (!password) {\n                                return [2, new UserInputError('Password cannot be blank!')];\n                            }\n                            user = new UserModel({\n                                email: email,\n                                password: password,\n                                username: username,\n                                address: address,\n                            });\n                            return [4, user.save()];\n                        case 1:\n                            _b.sent();\n                            token = user.generateAuthToken();\n                            return [2, token];\n                        case 2:\n                            error_2 = _b.sent();\n                            return [2, new ApolloError(error_2)];\n                        case 3: return [2];\n                    }\n                });\n            });\n        },\n    },\n};\n",{"version":3,"file":"/Users/ducminh/sale-manager-server/src/graphql/resolvers/user.ts","sourceRoot":"","sources":["/Users/ducminh/sale-manager-server/src/graphql/resolvers/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBA0DA;AA1DA,OAAO,EAAC,cAAc,EAAE,WAAW,EAAC,MAAM,uBAAuB,CAAA;AACjE,OAAO,SAAS,MAAM,mBAAmB,CAAA;AAEzC,eAAe;IACX,KAAK,EAAE;QACH,KAAK,EAAE,UAAO,GAAQ,EAAE,EAAoD;gBAAnD,gBAAK,EAAE,sBAAQ;;;;;;;4BAEhC,IAAI,CAAC,KAAK,EAAE;gCACR,WAAO,IAAI,cAAc,CAAC,oCAAoC,CAAC,EAAA;6BAClE;4BAED,IAAI,CAAC,QAAQ,EAAE;gCACX,WAAO,IAAI,cAAc,CAAC,2BAA2B,CAAC,EAAA;6BACzD;4BAEY,WAAM,SAAS,CAAC,OAAO,CAAC,EAAC,KAAK,OAAA,EAAC,CAAC,EAAA;;4BAAvC,IAAI,GAAG,SAAgC;4BAC7C,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;gCAC1C,WAAO,IAAI,WAAW,CAAC,yBAAyB,CAAC,EAAA;6BACpD;4BAEK,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAA;4BACtC,WAAO,KAAK,EAAA;;;4BAEZ,WAAO,IAAI,WAAW,CAAC,OAAK,CAAC,EAAA;;;;;SAEpC;QACD,MAAM,EAAE,UACJ,GAAQ,EACR,EAA2G;gBAA1G,gBAAK,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,oBAAO;;;;;;;4BAG/B,IAAI,CAAC,KAAK,EAAE;gCACR,WAAO,IAAI,cAAc,CAAC,wBAAwB,CAAC,EAAA;6BACtD;4BAED,IAAI,CAAC,QAAQ,EAAE;gCACX,WAAO,IAAI,cAAc,CAAC,0BAA0B,CAAC,EAAA;6BACxD;4BAED,IAAI,CAAC,QAAQ,EAAE;gCACX,WAAO,IAAI,cAAc,CAAC,2BAA2B,CAAC,EAAA;6BACzD;4BAEK,IAAI,GAAG,IAAI,SAAS,CAAC;gCACvB,KAAK,OAAA;gCACL,QAAQ,UAAA;gCACR,QAAQ,UAAA;gCACR,OAAO,SAAA;6BACV,CAAC,CAAA;4BACF,WAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAjB,SAAiB,CAAA;4BACX,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAA;4BACtC,WAAO,KAAK,EAAA;;;4BAEZ,WAAO,IAAI,WAAW,CAAC,OAAK,CAAC,EAAA;;;;;SAEpC;KACJ;CACJ,CAAA","sourcesContent":["import {UserInputError, ApolloError} from 'apollo-server-express'\nimport UserModel from '../../models/user'\n\nexport default {\n    Query: {\n        login: async (obj: any, {email, password}: {email: string; password: string}) => {\n            try {\n                if (!email) {\n                    return new UserInputError('Email or Username cannot be blank!')\n                }\n\n                if (!password) {\n                    return new UserInputError('Password cannot be blank!')\n                }\n\n                const user = await UserModel.findOne({email})\n                if (!user || !user.isValidPassword(password)) {\n                    return new ApolloError('Wrong user or password!')\n                }\n\n                const token = user.generateAuthToken()\n                return token\n            } catch (error) {\n                return new ApolloError(error)\n            }\n        },\n        signup: async (\n            obj: any,\n            {email, password, username, address}: {email: string; password: string; username: string; address?: string}\n        ) => {\n            try {\n                if (!email) {\n                    return new UserInputError('Email cannot be blank!')\n                }\n\n                if (!username) {\n                    return new UserInputError('Usernam cannot be blank!')\n                }\n\n                if (!password) {\n                    return new UserInputError('Password cannot be blank!')\n                }\n\n                const user = new UserModel({\n                    email,\n                    password,\n                    username,\n                    address,\n                })\n                await user.save()\n                const token = user.generateAuthToken()\n                return token\n            } catch (error) {\n                return new ApolloError(error)\n            }\n        },\n    },\n}\n"]}]}