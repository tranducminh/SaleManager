{"remainingRequest":"/Users/ducminh/Desktop/sale-manager-server/node_modules/ts-loader/index.js??ref--10-1!/Users/ducminh/Desktop/sale-manager-server/src/index.ts","dependencies":[{"path":"/Users/ducminh/Desktop/sale-manager-server/src/index.ts","mtime":1583769932862},{"path":"/Users/ducminh/Desktop/sale-manager-server/node_modules/cache-loader/dist/cjs.js","mtime":1583194319303},{"path":"/Users/ducminh/Desktop/sale-manager-server/node_modules/ts-loader/index.js","mtime":1583194319624}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nimport { ApolloServer } from 'apollo-server';\nimport dotenv from 'dotenv';\nimport mongoose from 'mongoose';\nimport schema from './graphql';\nimport { auth } from './middlewares/user';\nvar server = new ApolloServer({\n    schema: schema,\n    context: function (_a) {\n        var req = _a.req;\n        return __awaiter(_this, void 0, void 0, function () {\n            var token, result;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        token = req.headers.authorization || '';\n                        return [4, auth(token)];\n                    case 1:\n                        result = _b.sent();\n                        return [2, {\n                                isAuth: result.isAuth,\n                                userID: result.userID,\n                                isAdmin: result.isAdmin,\n                            }];\n                }\n            });\n        });\n    },\n    dataSources: function () { return ({}); },\n});\ndotenv.config();\nvar _a = process.env, DB_USERNAME = _a.DB_USERNAME, DB_PASSWORD = _a.DB_PASSWORD, DB_NAME = _a.DB_NAME;\nvar MONGODB_URI = \"mongodb+srv://\" + DB_USERNAME + \":\" + DB_PASSWORD + \"@cluster0-oajkt.mongodb.net/\" + DB_NAME + \"?retryWrites=true&w=majority\";\nmongoose\n    .connect(MONGODB_URI, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    useCreateIndex: true,\n})\n    .then(function () { return console.log('Database connected ...'); })\n    .catch(function (error) { return console.log('Could not connect to database ...', error.message); });\nserver.listen().then(function (_a) {\n    var url = _a.url;\n    console.log(\"\\uD83D\\uDE80 Server ready at \" + url);\n});\n",{"version":3,"file":"/Users/ducminh/Desktop/sale-manager-server/src/index.ts","sourceRoot":"","sources":["/Users/ducminh/Desktop/sale-manager-server/src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBA8CA;AA9CA,OAAO,EAAC,YAAY,EAAC,MAAM,eAAe,CAAA;AAC1C,OAAO,MAAM,MAAM,QAAQ,CAAA;AAC3B,OAAO,QAAQ,MAAM,UAAU,CAAA;AAC/B,OAAO,MAAM,MAAM,WAAW,CAAA;AAC9B,OAAO,EAAC,IAAI,EAAC,MAAM,oBAAoB,CAAA;AAEvC,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;IAC5B,MAAM,QAAA;IACN,OAAO,EAAE,UAAO,EAAK;YAAJ,YAAG;;;;;;wBAEV,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,EAAE,CAAA;wBAEhC,WAAM,IAAI,CAAC,KAAK,CAAC,EAAA;;wBAA1B,MAAM,GAAG,SAAiB;wBAG9B,WAAO;gCACH,MAAM,EAAE,MAAM,CAAC,MAAM;gCACrB,MAAM,EAAE,MAAM,CAAC,MAAM;gCACrB,OAAO,EAAE,MAAM,CAAC,OAAO;6BAC1B,EAAA;;;;KAOJ;IACD,WAAW,EAAE,cAAM,OAAA,CAAC,EAAE,CAAC,EAAJ,CAAI;CAC1B,CAAC,CAAA;AAEF,MAAM,CAAC,MAAM,EAAE,CAAA;AACT,IAAA,gBAAiD,EAAhD,4BAAW,EAAE,4BAAW,EAAE,oBAAsB,CAAA;AAEvD,IAAM,WAAW,GAAG,mBAAiB,WAAW,SAAI,WAAW,oCAA+B,OAAO,iCAA8B,CAAA;AACnI,QAAQ;KACH,OAAO,CAAC,WAAW,EAAE;IAClB,eAAe,EAAE,IAAI;IACrB,kBAAkB,EAAE,IAAI;IACxB,cAAc,EAAE,IAAI;CACvB,CAAC;KACD,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAArC,CAAqC,CAAC;KACjD,KAAK,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,KAAK,CAAC,OAAO,CAAC,EAA/D,CAA+D,CAAC,CAAA;AAEtF,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAC,EAAoB;QAAnB,YAAG;IACtB,OAAO,CAAC,GAAG,CAAC,kCAAsB,GAAK,CAAC,CAAA;AAC5C,CAAC,CAAC,CAAA","sourcesContent":["import {ApolloServer} from 'apollo-server'\nimport dotenv from 'dotenv'\nimport mongoose from 'mongoose'\nimport schema from './graphql'\nimport {auth} from './middlewares/user'\n\nconst server = new ApolloServer({\n    schema,\n    context: async ({req}) => {\n        // simple auth check on every request\n        const token = req.headers.authorization || ''\n        // if (!auth) throw new ApolloError('Tolen is required')\n        let result = await auth(token)\n        // console.log(...auth(token))\n\n        return {\n            isAuth: result.isAuth,\n            userID: result.userID,\n            isAdmin: result.isAdmin,\n        }\n        // const email = Buffer.from(auth, 'base64').toString('ascii')\n        // if (!isEmail.validate(email)) return {user: null}\n        // // find a user by their email\n        // const users = await store.users.findOrCreate({where: {email}})\n        // const user = (users && users[0]) || null\n        // return {user: {...user.dataValues}}\n    },\n    dataSources: () => ({}),\n})\n\ndotenv.config()\nconst {DB_USERNAME, DB_PASSWORD, DB_NAME} = process.env\n\nconst MONGODB_URI = `mongodb+srv://${DB_USERNAME}:${DB_PASSWORD}@cluster0-oajkt.mongodb.net/${DB_NAME}?retryWrites=true&w=majority`\nmongoose\n    .connect(MONGODB_URI, {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useCreateIndex: true,\n    })\n    .then(() => console.log('Database connected ...'))\n    .catch((error) => console.log('Could not connect to database ...', error.message))\n\nserver.listen().then(({url}: {url: string}) => {\n    console.log(`ğŸš€ Server ready at ${url}`)\n})\n"]}]}