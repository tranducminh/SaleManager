{"remainingRequest":"/Users/ducminh/Desktop/sale-manager-server/node_modules/ts-loader/index.js??ref--10-1!/Users/ducminh/Desktop/sale-manager-server/src/schemas/user.ts","dependencies":[{"path":"/Users/ducminh/Desktop/sale-manager-server/src/schemas/user.ts","mtime":1582828187011},{"path":"/Users/ducminh/Desktop/sale-manager-server/node_modules/cache-loader/dist/cjs.js","mtime":1583194319303},{"path":"/Users/ducminh/Desktop/sale-manager-server/node_modules/ts-loader/index.js","mtime":1583194319624}],"contextDependencies":[],"result":["import { Schema } from 'mongoose';\nvar UserSchema = new Schema({\n    username: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    address: {\n        type: String,\n        required: true,\n    },\n    isAdmin: {\n        type: Boolean,\n        required: true,\n        default: false,\n    },\n}, { timestamps: true, versionKey: false });\nexport default UserSchema;\n",{"version":3,"file":"/Users/ducminh/Desktop/sale-manager-server/src/schemas/user.ts","sourceRoot":"","sources":["/Users/ducminh/Desktop/sale-manager-server/src/schemas/user.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAW,MAAM,UAAU,CAAA;AAYzC,IAAM,UAAU,GAAW,IAAI,MAAM,CACjC;IACI,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,KAAK,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,OAAO,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,OAAO,EAAE;QACL,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,KAAK;KACjB;CACJ,EACD,EAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAC,CACxC,CAAA;AAED,eAAe,UAAU,CAAA","sourcesContent":["import {Schema, Document} from 'mongoose'\n\nexport interface UserDocument extends Document {\n    username: string\n    email: string\n    address: string\n    password: string\n    isAdmin: boolean\n    isValidPassword: (password: string) => boolean\n    generateAuthToken: () => string\n}\n\nconst UserSchema: Schema = new Schema(\n    {\n        username: {\n            type: String,\n            unique: true,\n            required: true,\n        },\n        email: {\n            type: String,\n            required: true,\n            unique: true,\n        },\n        password: {\n            type: String,\n            required: true,\n        },\n        address: {\n            type: String,\n            required: true,\n        },\n        isAdmin: {\n            type: Boolean,\n            required: true,\n            default: false,\n        },\n    },\n    {timestamps: true, versionKey: false}\n)\n\nexport default UserSchema\n"]}]}