"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var ModuleType;
(function (ModuleType) {
    ModuleType[ModuleType["ProjectSource"] = 0] = "ProjectSource";
    ModuleType[ModuleType["ProjectModule"] = 1] = "ProjectModule";
    ModuleType[ModuleType["TranspiledNodeModule"] = 2] = "TranspiledNodeModule";
    ModuleType[ModuleType["NormalNodeModule"] = 3] = "NormalNodeModule";
})(ModuleType = exports.ModuleType || (exports.ModuleType = {}));
var resolvePackagesCache = {};
var resolveModulesCache = {};
var KNOWN_RN_PACKAGES = [/expo.*/, /@expo.*/, /react-navigation.*/, /react-native.*/];
exports.default = (function (builder, modulePath) {
    var idx = modulePath.lastIndexOf(path.sep + 'node_modules' + path.sep);
    if (idx >= 0) {
        if (resolveModulesCache[modulePath] === undefined) {
            var pkgPathStart = modulePath[idx + 14] !== '@' ? idx + 14 : modulePath.indexOf(path.sep, idx + 14) + 1;
            var pkgPathEnd = modulePath.indexOf(path.sep, pkgPathStart);
            if (pkgPathEnd < 0) {
                pkgPathEnd = modulePath.length;
            }
            var pkgPath = modulePath.substr(0, pkgPathEnd);
            if (resolvePackagesCache[pkgPath] === undefined) {
                var pkgName_1 = pkgPath.substr(idx + 14);
                var moduleType = ModuleType.NormalNodeModule;
                var resolvedPath = pkgPath;
                try {
                    if (fs.lstatSync(pkgPath).isSymbolicLink()) {
                        var realPath = fs.realpathSync(pkgPath);
                        resolvedPath = realPath;
                        if (realPath.indexOf(builder.projectRoot) === 0) {
                            moduleType = ModuleType.ProjectModule;
                        }
                    }
                }
                catch (e) { }
                if (moduleType === ModuleType.NormalNodeModule && KNOWN_RN_PACKAGES.some(function (regex) { return regex.test(pkgName_1); })) {
                    moduleType = ModuleType.TranspiledNodeModule;
                }
                if (moduleType === ModuleType.NormalNodeModule) {
                    var entryFileText = void 0;
                    try {
                        entryFileText = fs.readFileSync(builder.require.resolve(pkgName_1), 'utf8');
                    }
                    catch (e) { }
                    if (entryFileText && entryFileText.indexOf('__esModule') < 0 && /^(export|import)[\s]/m.test(entryFileText)) {
                        moduleType = ModuleType.TranspiledNodeModule;
                    }
                }
                resolvePackagesCache[pkgPath] = {
                    realPath: resolvedPath,
                    moduleType: moduleType
                };
            }
            var resolvedPkg = resolvePackagesCache[pkgPath];
            resolveModulesCache[modulePath] = {
                realPath: path.join(resolvedPkg.realPath, modulePath.substr(pkgPathEnd + 1)),
                moduleType: resolvedPkg.moduleType
            };
        }
        return resolveModulesCache[modulePath];
    }
    else {
        return { realPath: modulePath, moduleType: ModuleType.ProjectSource };
    }
});
//# sourceMappingURL=resolveModule.js.map